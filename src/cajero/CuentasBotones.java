/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package cajero;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JPanel;

/**
 * Clase que representa una interfaz gráfica de usuario para mostrar
 * y gestionar las cuentas asociadas a una tarjeta. 
 * Esta clase extiende de JFrame y utiliza botones para interactuar con las cuentas.
 * @author Milena
 */
public class CuentasBotones extends javax.swing.JFrame {
  static String tarjeta;
    /**
     * Creates new form CuentasBotones
     */
   public Fondo imagen = new Fondo(); 
   
   /**
     * Crea una nueva instancia de CuentasBotones.
     * 
     * @param tarjeta la tarjeta asociada a las cuentas que se van a mostrar
     */
    public CuentasBotones(String tarjeta) {
         this.setLocationRelativeTo(null);
        this.tarjeta=tarjeta;
        initComponents();
         setResizable(false);
        agregarBotonesPeliculas();
          setLocationRelativeTo(null);
    }
    /**
     * Obtiene las cuentas asociadas a una tarjeta desde un archivo.
     * 
     * @param tarjeta la tarjeta cuya información de cuentas se va a obtener
     * @return un arreglo de cadenas con los nombres de las cuentas
     */
    private String[] obtenerCuentas(String tarjeta) {
        String archivoPath = "C:\\Users\\Milena\\taller de pogra\\tarjetas\\" + tarjeta + ".txt";
        File archivo = new File(archivoPath);
        ArrayList<String> nCuentas = new ArrayList<>();
        try (BufferedReader br = new BufferedReader(new FileReader(archivo))) {
            String linea;
            while ((linea = br.readLine()) != null) {
                if (!linea.contains(":")) {
                    nCuentas.add(linea);
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return nCuentas.toArray(new String[0]);
    }

    String nncuentas = "";
    /**
     * Agrega botones al panel para cada cuenta obtenida de la tarjeta.
     */
    private void agregarBotonesPeliculas() {
        String[] ncuentas = obtenerCuentas(tarjeta);
        for (String nombre : ncuentas) {
            JButton boton = new JButton(nombre);
            // AQUI CAMBIAMOS EL COLOR DEL FONDO Y DE LA LETRA
            configurarBotonConColor(boton, Color.BLUE, Color.WHITE);
            boton.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    nncuentas = nombre;
                    menu pel = new menu(tarjeta, nncuentas);
                    pel.setVisible(true);
                    dispose();
                }
            });
            panelDeCuentas.add(boton);
        }
    }
    /**
     * Configura un botón con colores de fondo y texto especificados.
     * 
     * @param boton el botón a configurar
     * @param colorFondo el color de fondo del botón
     * @param colorTexto el color del texto del botón
     */
  public void configurarBotonConColor(JButton boton, Color colorFondo, Color colorTexto) {
    boton.setBackground(colorFondo);
    boton.setForeground(colorTexto);
    // AQUI CAMBIAMOS EL TIPO DE  LETRA Y TAMANIO
    boton.setFont(boton.getFont().deriveFont(java.awt.Font.BOLD, 42f)); // Establecer la fuente en negrita y tamaño 36
    boton.setOpaque(true);
    boton.setBorderPainted(false);  // Quitar el borde para que solo se vea el color de fondo
}
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelDeCuentas = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        panelDeCuentas.setLayout(new java.awt.GridLayout(0, 2));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panelDeCuentas, javax.swing.GroupLayout.PREFERRED_SIZE, 867, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 12, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panelDeCuentas, javax.swing.GroupLayout.PREFERRED_SIZE, 535, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 12, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CuentasBotones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CuentasBotones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CuentasBotones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CuentasBotones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CuentasBotones(tarjeta).setVisible(true);
            }
        });
    }
    /**
     * Clase interna para representar un panel con una imagen de fondo.
     */
     class Fondo extends JPanel {

        private Image imagen;

        @Override
        public void paint(Graphics g) {
            imagen = new ImageIcon(getClass().getResource("/imagenes/fondo.png")).getImage();
            g.drawImage(imagen, 0, 0, getWidth(), getHeight(), this);
            setOpaque(false);
            super.paint(g);
        }
    }
    /**
     * Establece un ícono redimensionado en un botón.
     * 
     * @param url la ruta del ícono
     * @param b el botón en el que se establecerá el ícono
     * @return el ícono redimensionado
     */
     public Icon setIcono(String url,JButton b){
         ImageIcon  icon= new ImageIcon(getClass().getResource(url)); 
         int ancho =b.getWidth();
         int alto =b.getHeight();
         ImageIcon icono= new ImageIcon(icon.getImage().getScaledInstance(ancho,alto,Image.SCALE_DEFAULT)); 
         return icono;
     }
     /**
     * Establece un ícono redimensionado en un botón cuando se presiona.
     * 
     * @param url la ruta del ícono
     * @param b el botón en el que se establecerá el ícono
     * @param ancho el ancho del ícono redimensionado
     * @param alto el alto del ícono redimensionado
     * @return el ícono redimensionado
     */
     public Icon setIconoPrecionado(String url,JButton b,int ancho,int alto){
       
         ImageIcon icon= new ImageIcon(getClass().getResource(url));
          int  width = b.getWidth()- ancho;
          int height = b.getHeight() - alto;
          ImageIcon icono = new ImageIcon(icon.getImage().getScaledInstance(width,height,Image.SCALE_DEFAULT));
          return icono;
     }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel panelDeCuentas;
    // End of variables declaration//GEN-END:variables
}
